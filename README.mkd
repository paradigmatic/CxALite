Description
===========

_CxALite_ is a lightweight java library allowing users to couple
concurrent process as describe in [Complex
Automata](http://www.complex-automata.org/) (CxA) theory. It is particularly
suited for scientific computing to parallelize and couple multi-scale
and multi-science models. In its current implementation, _CxALite_
works only on shared-memory machines (multi-core and/or multi-cpu).

_CxALite_ was written to match strictly the CxA execution model described in

> P.M.A. Sloot and A.G. Hoekstra, Modeling Dynamic Systems with
  Cellular Automata", in Handbook of Dynamic System Modeling, Edior:
  Paul A. Fishwick, Series: Chapman & Hall/CRC Computer & Information
  Science Series (to be published).

Another open source implementation of CxA called
[_MUSCLE_](http://muscle.berlios.de/) (Multiscale Coupling Library and
Environment) is available also. MUSCLE is _CxALite_ big brother and has the following advantages:

  * MUSCLE allows to couple code written in Java, C, C++ and
    Fortran, where CxALite is limited to Java code.
  * MUSCLE allows to split a simulation on several machines.
  * MUSCLE contains facilities to manage physical units.

However, CxALite has a few advantages over MUSCLE:

  * CxALite has no dependencies (except the standard Java runtime).
  * CxALite has a very compact code base (less than 350 lines of code).
  * CxALite is particularly unobstrusive, allowing fast experimentation
    and prototyping.



License and ownership
---------------------

_CxALite_ is an free open source library released under GNU GPLv3 license
(see the LICENSE file included in the bundle). It was developped during
EU founded research project [COAST](http://www.complex-automata.org/). 

Copyright University of Geneva (Jean-Luc Falcone), 2009. All rights reserved.


Installation
============

Requirements
------------

There is only one requirement:

 * Java platform JDK (tested and developed with 1.6 but 1.5 should also work).

_CxALite_ will thus work on every machine with a valid java
installation (Linux, MacOSX, Solaris, Windows, etc.)

Additionaly, you will need to install the [ant](http://ant.apache.org/) tool if
you want to build it from source.

Download
--------

You can grab the latest archives of _CxALite_ project at GitHub
[download page](http://github.com/paradigmatic/_CxALite_/downloads).

Alternatively, you can use the Git source manager to directly clone the current
developement repository with:

        $ git://github.com/paradigmatic/CxALite.git


Binary edition
--------------

Simply download and unpack the tarball. The jar can be directly used in classpath
and the documentation is already generated.


Source edition
--------------

The project use ant as a build tool. To compile and produce the jar:

        $ ant jar

To compile the javadoc:

        $ ant doc

To run the tests:

        $ ant tests

The required dependencies are included in the lib directory.


Usage
=====

To use it, just append the 'CxAlite.jar' to your classpath.

_To be done_


Examples
========

Have a look in 'cxa.examples' packages for examples.


Support and Collaboration
=========================

You can get help through the following methods:

* Read the project [wiki](http://wiki.github.com/paradigmatic/CxALite/)
* Open an entry in the project [issue tracker](http://github.com/paradigmatic/CxALite/issues)
* Email the project maintainer: jean-luc[dot]falcone[at]unige[dot]ch

Do not hesitate to send critics and feature requests.

The project is hosted by [github](http://github.com). If you want to
collaborate, you are encouraged to create an account there (basic accounts
are free). The full source is browsable in the [project homepage](http://github.com/paradigmatic/CxALite/tree/master).